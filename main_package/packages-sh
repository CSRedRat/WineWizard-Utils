ww_install_allcodecs()
{
    ww_install_dirac
    ww_install_l3codecx
    ww_install_ffdshow
    ww_install_icodecs
    ww_install_xvid
}

ww_install_allfonts()
{
    ww_install_baekmuk
    ww_install_cambria
    ww_install_constantia
    ww_install_consolas
    ww_install_corefonts
    ww_install_droid
    ww_install_eufonts
    ww_install_liberation
    ww_install_lucida
    ww_install_opensymbol
    ww_install_tahoma
    ww_install_takao
    ww_install_uff
    ww_install_wenquanyi
    ww_install_unifont
}

ww_install_amstream()
{
    if ww_installed "$WW_SYS32/amstream.dll"
    then
        return
    fi
    ww_cp_all amstream
    ww_regsvr amstream.dll
    ww_override_dlls native amstream
}

ww_install_art2kmin()
{
    if ww_installed "$WW_COMMON86/Microsoft Shared/OFFICE12/ACEES.DLL"
    then
        return
    fi
    ww_set_winver winxp
    ww_cd art2kmin
    ww_try wine "AccessRuntime.exe" /q
}

ww_install_atmlib()
{
    if ww_installed "$WW_SYS32/atmlib.dll"
    then
        return
    fi
    ww_cp_all atmlib
}

ww_install_avifil32()
{
    if ww_installed "$WW_SYS32/avifil32.dll"
    then
        return
    fi
    ww_cp_all avifil32
    ww_override_dlls native avifil32
}

ww_install_baekmuk()
{
    if ww_installed "$WW_FONTS/baekmuk.ttf"
    then
        return
    fi
    ww_cp_all_fonts baekmuk
    ww_register_font batang.ttf "Baekmuk Batang"
    ww_register_font gulim.ttf "Baekmuk Gulim"
    ww_register_font dotum.ttf "Baekmuk Dotum"
    ww_register_font hline.ttf "Baekmuk Headline"
}

ww_install_cabinet()
{
    if ww_installed "$WW_SYS32/cabinet.dll"
    then
        return
    fi
    ww_cp_all cabinet
    ww_override_dlls native,builtin cabinet
}

ww_install_cambria()
{
    if ww_installed "$WW_FONTS/cambria.ttc"
    then
        return
    fi
    ww_cp_all_fonts cambria
    ww_register_font cambria.ttc "Cambria"
    ww_register_font cambriab.ttf "Cambria Bold"
    ww_register_font cambriai.ttf "Cambria Italic"
    ww_register_font cambriaz.ttf "Cambria Bold Italic"
}

ww_install_cjkfonts()
{
    ww_install_fakechinese
    ww_install_fakejapanese
    ww_install_fakekorean
    ww_install_unifont
}

ww_install_cmd()
{
    if ww_installed "$WW_SYS32/cmd.exe"
    then
        return
    fi
    ww_cp_all cmd
    ww_override_dlls native,builtin cmd.exe
}

ww_install_comctl32()
{
    if ww_installed "$WW_SYS32/comctl32.dll"
    then
        return
    fi
    ww_cp_all comctl32
    ww_override_dlls native,builtin comctl32
    ww_override_app_dlls winecfg.exe builtin comctl32
    ww_override_app_dlls explorer.exe builtin comctl32
    ww_override_app_dlls iexplore.exe builtin comctl32
}

ww_install_comctl32ocx()
{
    if ww_installed "$WW_SYS32/mscomctl.ocx"
    then
        return
    fi
    ww_cp_all comctl32ocx
    ww_regsvr comctl32.ocx mscomctl.ocx mscomct2.ocx
}

ww_install_comdlg32ocx()
{
    if ww_installed "$WW_SYS32/comdlg32.ocx"
    then
        return
    fi
    ww_cp_all comdlg32ocx
    ww_regsvr comdlg32.ocx
}

ww_install_consolas()
{
    if ww_installed "$WW_FONTS/consola.ttf"
    then
        return
    fi
    ww_cp_all_fonts consolas
    ww_register_font consola.ttf "Consoleas"
    ww_register_font consolab.ttf "Consoleas Bold"
    ww_register_font consolai.ttf "Consoleas Italic"
    ww_register_font consolaz.ttf "Consoleas Bold Italic"
}

ww_install_constantia()
{
    if ww_installed "$WW_FONTS/constan.ttf"
    then
        return
    fi
    ww_cp_all_fonts constantia
    ww_register_font constan.ttf "Constantia"
    ww_register_font constanb.ttf "Constantia Bold"
    ww_register_font constani.ttf "Constantia Italic"
    ww_register_font constanz.ttf "Constantia Bold Italic"
}

ww_install_corefonts()
{
    if ww_installed "$WW_FONTS/arial.ttf"
    then
        return
    fi
    ww_cp_all_fonts corefonts
    ww_register_font arial.ttf "Arial"
    ww_register_font arialbd.ttf "Arial Bold"
    ww_register_font arialbi.ttf "Arial Bold Italic"
    ww_register_font ariali.ttf "Arial Italic"
    ww_register_font ariblk.ttf "Arial Black"
    ww_register_font comic.ttf "Comic Sans MS"
    ww_register_font comicbd.ttf "Comic Sans MS Bold"
    ww_register_font cour.ttf "Courier New"
    ww_register_font courbd.ttf "Courier New Bold"
    ww_register_font courbi.ttf "Courier New Bold Italic"
    ww_register_font couri.ttf "Courier New Italic"
    ww_register_font georgia.ttf "Georgia"
    ww_register_font georgiab.ttf "Georgia Bold"
    ww_register_font georgiaz.ttf "Georgia Bold Italic"
    ww_register_font georgiai.ttf "Georgia Italic"
    ww_register_font impact.ttf "Impact"
    ww_register_font times.ttf "Times New Roman"
    ww_register_font timesbd.ttf "Times New Roman Bold"
    ww_register_font timesbi.ttf "Times New Roman Bold Italic"
    ww_register_font timesi.ttf "Times New Roman Italic"
    ww_register_font trebuc.ttf "Trebucet MS"
    ww_register_font trebucbd.ttf "Trebucet MS Bold"
    ww_register_font trebucbi.ttf "Trebucet MS Bold Italic"
    ww_register_font trebucit.ttf "Trebucet MS Italic"
    ww_register_font verdana.ttf "Verdana"
    ww_register_font verdanab.ttf "Verdana Bold"
    ww_register_font verdanaz.ttf "Verdana Bold Italic"
    ww_register_font verdanai.ttf "Verdana Italic"
    ww_register_font webdings.ttf "Webdings"
}

ww_install_crypt32()
{
    if ww_installed "$WW_SYS32/crypt32.dll"
    then
        return
    fi
    ww_install_msasn1
    ww_cp_all crypt32
    ww_override_dlls native crypt32
}

ww_install_d3dcompiler_43()
{
    if ww_installed "$WW_SYS32/d3dcompiler_43.dll"
    then
        return
    fi
    ww_cp_all d3dcompiler_43
    ww_override_dlls native d3dcompiler_43
}

ww_install_d3dx10()
{
    if ww_installed "$WW_SYS32/d3dx10_33.dll"
    then
        return
    fi
    ww_cp_all d3dx10
    ww_override_dlls native d3dx10_33 d3dx10_34 d3dx10_35 d3dx10_36 d3dx10_37 d3dx10_38 d3dx10_39 d3dx10_40 d3dx10_41 d3dx10_42 d3dx10_43
}

ww_install_d3dx11_42()
{
    if ww_installed "$WW_SYS32/d3dx11_42.dll"
    then
        return
    fi
    ww_cp_all d3dx11_42
    ww_override_dlls native d3dx11_42
}

ww_install_d3dx11_43()
{
    if ww_installed "$WW_SYS32/d3dx11_43.dll"
    then
        return
    fi
    ww_cp_all d3dx11_43
    ww_override_dlls native d3dx11_43
}

ww_install_d3dx9()
{
    if ww_installed "$WW_SYS32/d3dx9_43.dll"
    then
        return
    fi
    ww_cp_all d3dx9
    ww_override_dlls native d3dx9_24 d3dx9_25 d3dx9_26 d3dx9_27 d3dx9_28 d3dx9_29 d3dx9_30 d3dx9_31 d3dx9_32 d3dx9_33 d3dx9_34 d3dx9_35 d3dx9_36 d3dx9_37 d3dx9_38 d3dx9_39 d3dx9_40 d3dx9_41 d3dx9_42 d3dx9_43
}

ww_install_d3dx9_26()
{
    if ww_installed "$WW_SYS32/d3dx9_26.dll"
    then
        return
    fi
    ww_cp_all d3dx9_26
    ww_override_dlls native d3dx9_26
}

ww_install_d3dx9_28()
{
    if ww_installed "$WW_SYS32/d3dx9_28.dll"
    then
        return
    fi
    ww_cp_all d3dx9_28
    ww_override_dlls native d3dx9_28
}

ww_install_d3dx9_31()
{
    if ww_installed "$WW_SYS32/d3dx9_31.dll"
    then
        return
    fi
    ww_cp_all d3dx9_31
    ww_override_dlls native d3dx9_31
}

ww_install_d3dx9_35()
{
    if ww_installed "$WW_SYS32/d3dx9_35.dll"
    then
        return
    fi
    ww_cp_all d3dx9_35
    ww_override_dlls native d3dx9_35
}

ww_install_d3dx9_36()
{
    if ww_installed "$WW_SYS32/d3dx9_36.dll"
    then
        return
    fi
    ww_cp_all d3dx9_36
    ww_override_dlls native d3dx9_36
}

ww_install_d3dx9_39()
{
    if ww_installed "$WW_SYS32/d3dx9_39.dll"
    then
        return
    fi
    ww_cp_all d3dx9_39
    ww_override_dlls native d3dx9_39
}

ww_install_d3dx9_42()
{
    if ww_installed "$WW_SYS32/d3dx9_42.dll"
    then
        return
    fi
    ww_cp_all d3dx9_42
    ww_override_dlls native d3dx9_42
}

ww_install_d3dx9_43()
{
    if ww_installed "$WW_SYS32/d3dx9_43.dll"
    then
        return
    fi
    ww_cp_all d3dx9_43
    ww_override_dlls native d3dx9_43
}

ww_install_d3dxof()
{
    if ww_installed "$WW_SYS32/d3dxof.dll"
    then
        return
    fi
    ww_cp_all d3dxof
    ww_override_dlls native d3dxof
}

ww_install_devenum()
{
    if ww_installed "$WW_SYS32/devenum.dll"
    then
        return
    fi
    ww_cp_all devenum
    ww_regsvr devenum.dll
    ww_override_dlls native devenum
}

ww_install_dinput()
{
    if ww_installed "$WW_SYS32/dinput.dll"
    then
        return
    fi
    ww_cp_all dinput
    ww_regsvr dinput.dll
    ww_override_dlls native dinput
}

ww_install_dinput8()
{
    if ww_installed "$WW_SYS32/dinput8.dll"
    then
        return
    fi
    ww_cp_all dinput8
    ww_regsvr dinput8.dll
    ww_override_dlls native dinput8
}

ww_install_dirac()
{
    if ww_installed "$WW_PROGRAM86/Dirac/DiracDecoder.dll"
    then
        return
    fi
    ww_install_vcrun2008
    ww_cd dirac
    ww_ahk_do "
    SetTitleMatchMode, 2
    run DiracDirectShowFilter-1.0.2.exe
    WinWait, Dirac, Welcome
    ControlClick, Button2
    WinWait, Dirac, License
    ControlClick, Button2
    WinWait, Dirac, Location
    ControlClick, Button2
    WinWait, Dirac, Components
    ControlClick, Button2
    WinWait, Dirac, environment
    ControlCLick, Button1
    WinWait, Dirac, installed
    ControlClick, Button2
    WinWaitClose
"
}

ww_install_directmusic()
{
    if ww_installed "$WW_SYS32/dmusic.dll"
    then
        return
    fi
    ww_cp_all directmusic
    ww_regsvr devenum.dll dmband.dll dmcompos.dll dmime.dll dmloader.dll dmscript.dll dmstyle.dll dmsynth.dll dmusic.dll dswave.dll quartz.dll
    ww_override_dlls native devenum dmband dmcompos dmime dmloader dmscript dmstyle dmsynth dmusic dmusic32 dswave streamci quartz
}

ww_install_directplay()
{
    if ww_installed "$WW_SYS32/dplayx.dll"
    then
        return
    fi
    ww_cp_all directplay
    ww_override_dlls native dplayx dpnet dpnhpast dpwsockx
    ww_regsvr dplayx.dll dpnet.dll dpnhpast.dll
}

ww_install_directx9()
{
    if ww_installed "$WW_SYS32/d3dx10_33.dll"
    then
        return
    fi
    ww_warn "You probably shouldn't be using this. d3dx9 or, better, d3dx9_36 usually suffice."
    ww_override_dlls native d3dim d3drm d3dx8 d3dx9_24 d3dx9_25 d3dx9_26 d3dx9_27 d3dx9_28 d3dx9_29 d3dx9_30 d3dx9_31 d3dx9_32 d3dx9_33 d3dx9_34 d3dx9_35 d3dx9_36 d3dx9_37 d3dx9_38 d3dx9_39 d3dx9_40 d3dx9_41 d3dx9_42 d3dx9_43 d3dxof dciman32 ddrawex devenum dmband dmcompos dmime dmloader dmscript dmstyle dmsynth dmusic dmusic32 dnsapi dplay dplayx dpnaddr dpnet dpnhpast dpnlobby dswave dxdiagn msdmo qcap quartz streamci dxdiag.exe
    ww_override_dlls builtin d3d8 d3d9 dinput dinput8 dsound
    ww_set_winver winxp
    ww_cd directx9
    ww_try wine DXSETUP.exe /silent
}

ww_install_disable_d3dx11_42()
{
    ww_override_dlls disabled d3dx11_42
}

ww_install_disable_d3dx11_43()
{
    ww_override_dlls disabled d3dx11_43
}

ww_install_dmsynth()
{
    if ww_installed "$WW_SYS32/dmsynth.dll"
    then
        return
    fi
    ww_cp_all dmsynth
    ww_regsvr dmsynth.dll
    ww_override_dlls native dmsynth
}

ww_install_dotnet11()
{
    if ww_installed "$WW_WIN/Microsoft.NET/Framework/v1.1.4322/ndpsetup.ico"
    then
        return
    fi
    if [ $WW_ARCH = win64 ]
    then
        ww_die "This package does not work on a 64-bit installation"
    fi
    ww_remove_mono
    ww_install_corefonts
    ww_fontfix
    ww_cd dotnet11
    WINEDLLOVERRIDES="winemenubuilder.exe=n;regsvcs.exe=b" ww_ahk_do "
    SetTitleMatchMode, 2
    run, dotnetfx.exe /q /C:\"install /q\"
    Loop
    {
        sleep 1000
        ifwinexist, Fatal error, Failed to delay load library
        {
            WinClose, Fatal error, Failed to delay load library
            continue
        }
        Process, exist, dotnetfx.exe
        dotnet_pid = %ErrorLevel%  ; Save the value immediately since ErrorLevel is often changed.
        if dotnet_pid = 0
        {
            break
        }
    }
"
}

ww_install_dotnet11sp1()
{
    if ww_installed "$WW_WIN/Microsoft.NET/Framework/v1.1.4322/CONFIG/web_hightrust.config.default"
    then
        return
    fi
    ww_remove_mono
    ww_install_dotnet11
    ww_cd dotnet11sp1
    WINEDLLOVERRIDES="winemenubuilder.exe=n;regsvcs.exe=b" ww_ahk_do "
    SetTitleMatchMode, 2
    run, NDP1.1sp1-KB867460-X86.exe /q /C:"install /q"
    Loop
    {
        sleep 1000
        ifwinexist, Fatal error, Failed to delay load library
        {
            WinClose, Fatal error, Failed to delay load library
            continue
        }
        Process, exist, dotnetfx.exe
        dotnet_pid = %ErrorLevel%  ; Save the value immediately since ErrorLevel is often changed.
        if dotnet_pid = 0
        {
            break
        }
    }
"
}

ww_install_dotnet20()
{
    if ww_installed "$WW_WIN/Microsoft.NET/Framework/v2.0.50727/Microsoft .NET Framework 2.0/install.exe"
    then
        return
    fi
    ww_remove_mono
    ww_fontfix
    ww_set_winver win2k
    if ww_workaround_wine_bug 34803 "" 1.8.0,
    then
        wine reg delete 'HKLM\Software\Microsoft\.NETFramework\v2.0.50727\SBSDisabled'
    fi
    ww_cd dotnet20
    if ww_workaround_wine_bug 30845 "Using native fusion while installing..." 1.5.8,
    then
        ww_try env WINEDLLOVERRIDES="mscoree,fusion=n;winemenubuilder.exe=n" wine dotnetfx.exe /q /c:"install.exe /q"
    else
        ww_try wine dotnetfx.exe /q /c:"install.exe /q"
    fi
    ww_set_winver winxp
    rm -f "$WW_SYS32"/msvc?80.dll
    if ww_workaround_wine_bug 30162 "Dirty hack, killing off mscorsvw.exe" 1.5.31,
    then
        ww_kill_all "mscorsvw.exe"
    fi
}

ww_install_dotnet20sp1()
{
    if ww_installed "$WW_WIN/winsxs/manifests/x86_Microsoft.VC80.CRT_1fc8b3b9a1e18e3b_8.0.50727.1433_x-ww_5cf844d2.cat"
    then
        return
    fi
    ww_install_dotnet20
    WINEDLLOVERRIDES="winemenubuilder.exe=n"
    ww_warn "Setting windows version so installer works"
    wineserver -k
    ww_set_winver win2k
    wineserver -w
    WINEDLLOVERRIDES="winemenubuilder.exe=n;ngen.exe,regsvcs.exe,mscorsvw.exe=b"
    export WINEDLLOVERRIDES
    wine reg add "HKLM\\Software\\Microsoft\\NET Framework Setup\\NDP\\v2.0.50727" /v Version /t REG_SZ /d "2.0.50727" /f
    ww_cd dotnet20sp1
    wine NetFx20SP1_x86.exe /q
    status=$?
    case $status in
        0) ;;
        105) echo "exit status $status - normal, user selected 'restart now'" ;;
        194) echo "exit status $status - normal, user selected 'restart later'" ;;
        *) ww_die "exit status $status - dotnet20sp1 installation failed" ;;
    esac
    rm -f "$WW_SYS32"/msvc?80.dll
    ww_set_winver winxp
}

ww_install_dotnet20sp2()
{
    if ww_installed "$WW_WIN/winsxs/manifests/x86_Microsoft.VC80.CRT_1fc8b3b9a1e18e3b_8.0.50727.3053_x-ww_b80fa8ca.cat"
    then
        return
    fi
    ww_install_dotnet20
    WINEDLLOVERRIDES="winemenubuilder.exe=n"
    if ww_workaround_wine_bug 22521 "Adding registry key, setting windows version so installer works"
    then
        wine reg add "HKLM\\Software\\Microsoft\\Net Framework Setup\\NDP\\v2.0.50727" /v Version /d "2.0.50727" /f
        wineserver -k
        ww_set_winver win2k
        wineserver -w
        WINEDLLOVERRIDES="winemenubuilder.exe=n;regsvcs.exe,mscorsvw.exe=b"
        export WINEDLLOVERRIDES
    fi
    if ww_workaround_wine_bug 34803 "" 1.8.0,
    then
        wine reg delete 'HKLM\Software\Microsoft\.NETFramework\v2.0.50727\SBSDisabled'
    fi
    ww_cd dotnet20sp2
    ww_ahk_do "
    SetTitleMatchMode, 2
    run, NetFx20SP2_x86.exe /q /c:"install.exe /q"
    Loop
    {
        sleep 1000
        ifwinexist,, cannot be uninstalled
        {
            WinClose,, cannot be uninstalled
            continue
        }
        Process, exist, NetFx20SP2_x86.exe
        dotnet_pid = %ErrorLevel%
        if dotnet_pid = 0
        {
            break
        }
    }
"
    status=$?
    case $status in
        0) ;;
        105) echo "exit status $status - normal, user selected 'restart now'" ;;
        194) echo "exit status $status - normal, user selected 'restart later'" ;;
        *) ww_die "exit status $status - dotnet20sp2 installation failed" ;;
    esac
    ww_set_winver winxp
}

ww_install_dotnet30()
{
    if ww_installed "$WW_WIN/Microsoft.NET/Framework/v3.0/Microsoft .NET Framework 3.0/logo.bmp"
    then
        return
    fi
    if test -f /proc/sys/kernel/yama/ptrace_scope
    then
        case `cat /proc/sys/kernel/yama/ptrace_scope` in
        0) ;;
        *) ww_warn "If install fails, set /proc/sys/kernel/yama/ptrace_scope to 0.  See http://bugs.winehq.org/show_bug.cgi?id=30410" ;;
        esac
    fi
    ww_install_dotnet20
    ww_warn "Installing .net 3.0 runtime takes 3 minutes on a very fast machine, and the Finished dialog may hide in the taskbar."
    LANGPACKS_BASE_PATH="${WW_WIN}"/SYSMSICache/Framework/v3.0
    test -d "${LANGPACKS_BASE_PATH}" || mkdir -p "${LANGPACKS_BASE_PATH}"
    for lang in ar cs da de el es "fi" fr he it jp ko nb nl pl pt-BR pt-PT ru sv tr zh-CHS zh-CHT
    do
        ln -sf "${WW_SYS32}"/spupdsvc.exe "${LANGPACKS_BASE_PATH}/dotnetfx3langpack${lang}.exe"
    done
    ww_set_winver winxp
    wine sc delete "FontCache3.0.0.0"
    if ww_workaround_wine_bug 30845 "Using native fusion..." ,1.5.6
    then
        WINEDLLOVERRIDES="winemenubuilder.exe=n;mscoree,fusion=n"
        export WINEDLLOVERRIDES
    fi
    WINEDLLOVERRIDES="ngen.exe,mscorsvw.exe=b;$WINEDLLOVERRIDES"
    ww_cd dotnet30
    ww_try wine netframework3.exe /q /c:"install.exe /q"
}

ww_install_dotnet30sp1()
{
    if ww_installed "$WW_SYS32/XpsFilt.dll"
    then
        return
    fi
    ww_install_dotnet30
    wineserver -w
    ww_install_dotnet20sp1
    wineserver -w
    wine reg add "HKLM\\Software\\Microsoft\\Net Framework Setup\\NDP\\v3.0" /v Version /t REG_SZ /d "3.0" /f
    wine reg add "HKLM\\Software\\Microsoft-\\Net Framework Setup\\NDP\\v3.0" /v SP /t REG_DWORD /d 0001 /f
    ww_cd dotnet30sp1
    wine msiexec /i "XPSEP XP and Server 2003 32 bit.msi" /qb
    wine sc delete FontCache3.0.0.0
    wine NetFx30SP1_x86.exe /q
}

ww_install_dotnet35()
{
    if ww_installed "$WW_WIN/Microsoft.NET/Framework/v3.5/MSBuild.exe"
    then
        return
    fi
    ww_warn "dotnet35 does not yet fully work or install on wine. Caveat emptor."
    ww_install_dotnet30sp1
    wineserver -w
    if ww_workaround_wine_bug 33450 "Installing msxml3"  ,1.5.28
    then
        ww_install_msxml3
    fi
    if ww_workaround_wine_bug 34803 "" 1.8.0,
    then
        wine reg delete "HKLM\\Software\\Microsoft\\NET Framework Setup\\NDP\\v3.5"
    fi
    ww_cd dotnet35
    cd wcu/dotNetFramework || exit
    wine dotNetFx35setup.exe /lang:ENU /q
}

ww_install_dotnet35sp1()
{
    if ww_installed "$WW_WIN/Microsoft.NET/Framework/v3.5/Microsoft .NET Framework 3.5 SP1/logo.bmp"
    then
        return
    fi
    ww_warn "dotnet35sp1 does not yet fully work or install on wine. Caveat emptor."
    ww_install_dotnet35
    wineserver -w
    ww_install_dotnet20sp2
    wineserver -w
    WINEDLLOVERRIDES="winemenubuilder.exe=n;ngen.exe,mscorsvw.exe=b"
    export WINEDLLOVERRIDES
    ww_cd dotnet35sp1
    ww_ahk_do "
    SetTitleMatchMode, 2
    run, dotnetfx35.exe /lang:ENU /q
    Loop
    {
        sleep 1000
        ifwinexist,, cannot be uninstalled
        {
            WinClose,, cannot be uninstalled
            continue
        }
        Process, exist, dotnetfx35.exe
        dotnet_pid = %ErrorLevel%
        if dotnet_pid = 0
        {
            break
        }
    }
"
}

ww_install_dotnet40()
{
    if ww_installed "$WW_WIN/Microsoft.NET/Framework/v4.0.30319/ngen.exe"
    then
        return
    fi
    if [ $WW_ARCH = win64 ]
    then
        ww_die "This package does not work on a 64-bit installation"
    fi
    ww_warn "dotnet40 does not yet fully work or install on wine.  Caveat emptor."
    ww_remove_mono
    wine reg delete "HKLM\\Software\\Microsoft\\NET Framework Setup\\NDP\\v4" /f
    ww_try rm -f "$WW_SYS32"/mscoree.dll
    ww_cd dotnet40
    WINEDLLOVERRIDES="winemenubuilder.exe=n;fusion=b" wine dotNetFx40_Full_x86_x64.exe /q /c:"install.exe /q" || true
    ww_override_dlls native mscoree
    wine reg add "HKLM\\Software\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full" /v Install /t REG_DWORD /d 0001 /f
    wine reg add "HKLM\\Software\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full" /v Version /t REG_SZ /d "4.0.30319" /f
    if ww_workaround_wine_bug 30707 "Manually registering assemblies"  1.5.5,
    then
        cd gacutil-net40 || exit
        for assembly in "$WW_WIN"/Microsoft.NET/Framework/v4.0.30319/*.[dD]ll
        do
            wine gacutil.exe /i "c:\\windows\\Microsoft.Net\\Framework\\v4.0.30319\\$assembly" /f
        done
        for assembly in "$WW_WIN"/Microsoft.NET/Framework/v4.0.30319/WPF/*.[dD]ll
        do
            wine gacutil.exe /i "c:\\windows\\Microsoft.Net\\Framework\\v4.0.30319\\WPF\\$assembly" /f || true
        done
        mkdir -p "$WW_WIN"/Microsoft.NET/assembly/GAC_32/System.EnterpriseServices/v4.0_4.0.0.0__b03f5f7f11d50a3a
        cp "$WW_WIN"/Microsoft.NET/Framework/v4.0.30319/System.EnterpriseServices.dll "$WW_WIN"/Microsoft.NET/assembly/GAC_32/System.EnterpriseServices/v4.0_4.0.0.0__b03f5f7f11d50a3a
    fi
}

ww_install_dotnet45()
{
    if ww_installed "$WW_WIN/Microsoft.NET/Framework/v4.0.30319/Microsoft.Windows.ApplicationServer.Applications.45.man"
    then
        return
    fi
    if [ $WW_ARCH = win64 ]
    then
        ww_warn "This package may not work on a 64-bit installation"
    fi
    wine reg delete "HKLM\\Software\\Microsoft\\NET Framework Setup\\NDP\\v4" /f
    ww_try rm -f "$WW_SYS32"/mscoree.dll
    ww_install_dotnet35
    ww_install_dotnet40
    ww_set_winver win7
    ww_cd dotnet45
    WINEDLLOVERRIDES="winemenubuilder.exe=n;fusion=b" wine dotnetfx45_full_x86_x64.exe /q /c:"install.exe /q"
    status=$?
    case $status in
        0) ;;
        105) echo "exit status $status - normal, user selected 'restart now'" ;;
        194) echo "exit status $status - normal, user selected 'restart later'" ;;
        *) w_die "exit status $status - dotnet45 installation failed" ;;
    esac
    ww_override_dlls native mscoree
    ww_warn "Setting Windows version to 2003, otherwise applications using .NET 4.5 will subtly fail"
    ww_set_winver win2k3
}

ww_install_dotnet_verifier()
{
    if ww_installed "$WW_SYS32/netfx_setupverifier.exe"
    then
        return
    fi
    ww_cp_all dotnet_verifier
}

ww_install_droid()
{
    if ww_installed "$WW_FONTS/droidsans-bold.ttf"
    then
        return
    fi
    ww_cp_all_fonts droid
    ww_register_font droidsans-bold.ttf "Droid Sans Bold"
    ww_register_font droidsansfallback.ttf "Droid Sans Fallback"
    ww_register_font droidsansjapanese.ttf "Droid Sans Japanese"
    ww_register_font droidsansmono.ttf "Droid Sans Mono"
    ww_register_font droidsans.ttf "Droid Sans"
    ww_register_font droidserif-bolditalic.ttf "Droid Serif Bold Italic"
    ww_register_font droidserif-bold.ttf "Droid Serif Bold"
    ww_register_font droidserif-italic.ttf "Droid Serif Italic"
    ww_register_font droidserif-regular.ttf "Droid Serif"
}

ww_install_dsdmo()
{
    if ww_installed "$WW_SYS32/dsdmo.dll"
    then
        return
    fi
    ww_cp_all dsdmo
    ww_regsvr dsdmo.dll dsdmoprp.dll
}

ww_install_dsound()
{
    if ww_installed "$WW_SYS32/dsound.dll"
    then
        return
    fi
    ww_cp_all dsound
    ww_regsvr dsound.dll
    ww_override_dlls native dsound
}

ww_install_dxdiag()
{
    if ww_installed "$WW_SYS32/dxdiag.exe"
    then
        return
    fi
    mkdir -p "$WW_WIN/help"
    ww_cd dxdiag
    cp -f "dxdiag.chm" "$WW_WIN/help"
    cp -f "dxdiag.exe" "$WW_SYS32"
    ww_override_dlls native dxdiag.exe
    if ww_workaround_wine_bug 1429
    then
        ww_install_dxdiagn
    fi
    if ww_workaround_wine_bug 25715
    then
        ww_install_quartz
    fi
    if ww_workaround_wine_bug 25716
    then
        ww_install_devenum
    fi
}

ww_install_dxdiagn()
{
    if ww_installed "$WW_SYS32/dxdiagn.dll"
    then
        return
    fi
    ww_cp_all dxdiagn
    ww_override_dlls native dxdiagn
}

ww_install_eufonts()
{
    if ww_installed "$WW_FONTS/trebucbd.ttf"
    then
        return
    fi
    ww_cp_all_fonts eufonts
    ww_register_font arialbi.ttf "Arial Bold Italic"
    ww_register_font ariali.ttf "Arial Italic"
    ww_register_font arial.ttf "Arial"
    ww_register_font timesbd.ttf "Times New Roman Bold"
    ww_register_font timesbi.ttf "Times New Roman Bold Italic"
    ww_register_font timesi.ttf "Times New Roman Italic"
    ww_register_font times.ttf "Times New Roman"
    ww_register_font trebucbd.ttf "Trebuchet Bold"
    ww_register_font trebucbi.ttf "Trebuchet Bold Italic"
    ww_register_font trebucit.ttf "Trebuchet Italic"
    ww_register_font trebuc.ttf "Trebuchet"
    ww_register_font verdanab.ttf "Verdana Bold"
    ww_register_font verdanai.ttf "Verdana Italian"
    ww_register_font verdana.ttf "Verdana"
    ww_register_font verdanaz.ttf "Verdana Bold Italic"
}

ww_install_fakechinese()
{
    ww_install_wenquanyi
    ww_register_font_replacement "Microsoft JhengHei" "WenQuanYi Micro Hei"
    ww_register_font_replacement "Microsoft YaHei" "WenQuanYi Micro Hei"
    ww_register_font_replacement "SimHei" "WenQuanYi Micro Hei"
    ww_register_font_replacement "DFKai-SB" "WenQuanYi Micro Hei"
    ww_register_font_replacement "FangSong" "WenQuanYi Micro Hei"
    ww_register_font_replacement "KaiTi" "WenQuanYi Micro Hei"
    ww_register_font_replacement "PMingLiU" "WenQuanYi Micro Hei"
    ww_register_font_replacement "MingLiU" "WenQuanYi Micro Hei"
    ww_register_font_replacement "NSimSun" "WenQuanYi Micro Hei"
    ww_register_font_replacement "SimKai" "WenQuanYi Micro Hei"
    ww_register_font_replacement "SimSun" "WenQuanYi Micro Hei"
}

ww_install_fakejapanese()
{
    ww_install_takao
    ww_register_font_replacement "MS Gothic" "TakaoGothic"
    ww_register_font_replacement "MS PGothic" "TakaoPGothic"
    ww_register_font_replacement "MS Mincho" "TakaoMincho"
    ww_register_font_replacement "MS PMincho" "TakaoPMincho"
}

ww_install_fakekorean()
{
    ww_install_baekmuk
    ww_register_font_replacement "Gulim" "Baekmuk Gulim"
    ww_register_font_replacement "GulimChe" "Baekmuk Gulim"
    ww_register_font_replacement "Batang" "Baekmuk Batang"
    ww_register_font_replacement "BatangChe" "Baekmuk Batang"
    ww_register_font_replacement "Dotum" "Baekmuk Dotum"
    ww_register_font_replacement "DotumChe" "Baekmuk Dotum"
}

ww_install_ffdshow()
{
    if ww_installed "$WW_PROGRAM86/ffdshow/ff_liba52.dll"
    then
        return
    fi
    ww_cd ffdshow
    ww_try wine ffdshow_beta7_rev3154_20091209.exe /silent
}

ww_install_gdiplus()
{
    if ww_installed "$WW_SYS32/gdiplus.dll"
    then
        return
    fi
    ww_cp_all gdiplus
    ww_override_dlls native gdiplus
}

ww_install_gdiplus_winxp()
{
    if ww_installed "$WW_SYS32/gdiplus_winxp.dll"
    then
        return
    fi
    ww_cp_all gdiplus_winxp
    ww_override_dlls native gdiplus_winxp
}

ww_install_gfw()
{
    if ww_installed "$WW_SYS32/xlive.dll"
    then
        return
    fi
    ww_cd gfw
    ww_try wine gfwlivesetupmin.exe /nodotnet /q
    ww_install_msasn1
}

ww_install_glidewrapper()
{
    if ww_installed "$WW_WIN/glide3x.dll"
    then
        return
    fi
    ww_cd glidewrapper
    ww_try wine GlideWrapper084c.exe /S
}

ww_install_glut()
{
    if ww_installed "$WW_C/glut-3.7.6-bin/glut32.lib"
    then
        return
    fi
    ww_try cp -R "$WW_PACKAGES"/glut/glut-3.7.6-bin "$WW_C"
    ww_try cp "$WW_C"/glut-3.7.6-bin/glut32.dll "$WW_SYS32"
    ww_warn "If you want to compile glut programs, add c:/glut-3.7.6-bin to LIB and INCLUDE"
}

ww_install_hid()
{
    if ww_installed "$WW_SYS32/hid.dll"
    then
        return
    fi
    ww_cp_all hid
    ww_override_dlls native hid
}

ww_install_hosts()
{
    mkdir -p "$WW_SYS32"/drivers/etc
    touch "$WW_SYS32"/drivers/etc/hosts
    touch "$WW_SYS32"/drivers/etc/services
}

ww_install_icodecs()
{
    if ww_installed "$WW_SYS32/ir50_32.dll"
    then
        return
    fi
    ww_cd icodecs
    ww_ahk_do "
    SetTitleMatchMode, 2
    run codinstl.exe
    winwait, Welcome
    sleep 1000
    controlclick, Button1  ; Next
    winwait, Software License Agreement
    sleep 1000
    controlclick, Button2  ; Yes
    winwait, Setup Complete
    sleep 1000
    controlclick, Button4  ; Finish
    winwaitclose
"
    ww_regsvr ir50_32.dll
}

ww_install_jet40()
{
    if ww_installed "$WW_COMMON86/Microsoft Shared/dao/dao360.dll"
    then
        return
    fi
    ww_install_mdac27
    ww_install_wsh57
    ww_cd jet40
    ww_try wine jet40sp8_9xnt.exe /q
}

ww_install_l3codecx()
{
    if ww_installed "$WW_SYS32/l3codecx.ax"
    then
        return
    fi
    ww_cp_all l3codecx
    ww_regsvr l3codecx.ax
}

ww_install_liberation()
{
    if ww_installed "$WW_FONTS/liberationmono-bolditalic.ttf"
    then
        return
    fi
    ww_cp_all_fonts liberation
    ww_register_font liberationmono-bolditalic.ttf "LiberationMono-BoldItalic"
    ww_register_font liberationmono-bold.ttf "LiberationMono-Bold"
    ww_register_font liberationmono-italic.ttf "LiberationMono-Italic"
    ww_register_font liberationmono-regular.ttf "LiberationMono-Regular"
    ww_register_font liberationsans-bolditalic.ttf "LiberationSans-BoldItalic"
    ww_register_font liberationsans-bold.ttf "LiberationSans-Bold"
    ww_register_font liberationsans-italic.ttf "LiberationSans-Italic"
    ww_register_font liberationsans-regular.ttf "LiberationSans-Regular"
    ww_register_font liberationserif-bolditalic.ttf "LiberationSerif-BoldItalic"
    ww_register_font liberationserif-bold.ttf "LiberationSerif-Bold"
    ww_register_font liberationserif-italic.ttf "LiberationSerif-Italic"
    ww_register_font liberationserif-regular.ttf "LiberationSerif-Regular"
}

ww_install_lucida()
{
    if ww_installed "$WW_FONTS/lucon.ttf"
    then
        return
    fi
    ww_cp_all_fonts lucida
    ww_register_font lucon.ttf "Lucida Console"
}

ww_install_mdac27()
{
    if ww_installed "$WW_COMMON86/System/ADO/msado26.tlb"
    then
        return
    fi
    if test $WW_ARCH = win64
    then
        ww_die "Installer doesn't support 64-bit architecture."
    fi
    ww_install_native_mdac
    ww_set_winver nt40
    ww_cd mdac27
    wine mdac_typ.exe /q /C:"setup /QNT"
    ww_set_winver winxp
}

ww_install_mdac28()
{
    if ww_installed "$WW_COMMON86/System/ADO/msado27.tlb"
    then
        return
    fi
    ww_install_native_mdac
    ww_set_winver win98
    ww_cd mdac28
    ww_try wine mdac_typ.exe /q /C:"setup /QNT"
    ww_set_winver winxp
}

ww_install_mfc40()
{
    if ww_installed "$WW_SYS32/mfc40.dll"
    then
        return
    fi
    ww_cp_all mfc40
}

ww_install_mfc42()
{
    if ww_installed "$WW_SYS32/mfc42u.dll"
    then
        return
    fi
    ww_cp_all mfc42
}

ww_install_msacm32()
{
    if ww_installed "$WW_SYS32/msacm32.dll"
    then
        return
    fi
    ww_cp_all msacm32
    ww_override_dlls native,builtin msacm32
}

ww_install_msasn1()
{
    if ww_installed "$WW_SYS32/msasn1.dll"
    then
        return
    fi
    ww_cp_all msasn1
}

ww_install_msctf()
{
    if ww_installed "$WW_SYS32/msctf.dll"
    then
        return
    fi
    ww_cp_all msctf
    ww_override_dlls native,builtin msctf
}

ww_install_msflxgrd()
{
    if ww_installed "$WW_SYS32/msflxgrd.ocx"
    then
        return
    fi
    ww_cp_all msflxgrd
    ww_regsvr msflxgrd.ocx
}

ww_install_msftedit()
{
    if ww_installed "$WW_SYS32/msftedit.dll"
    then
        return
    fi
    ww_cp_all msftedit
    ww_override_dlls native,builtin msftedit
}

ww_install_mshflxgd()
{
    if ww_installed "$WW_SYS32/mshflxgd.ocx"
    then
        return
    fi
    ww_cp_all mshflxgd
    ww_regsvr mshflxgd.ocx
}

ww_install_msls31()
{
    if ww_installed "$WW_SYS32/msls31.dll"
    then
        return
    fi
    ww_cp_all msls31
}

ww_install_msmask()
{
    if ww_installed "$WW_SYS32/msmask32.ocx"
    then
        return
    fi
    ww_cp_all msmask
    ww_regsvr msmask.ocx
}

ww_install_mspatcha()
{
    if ww_installed "$WW_SYS32/mspatcha.dll"
    then
        return
    fi
    ww_cp_all mspatcha
    ww_override_dlls native,builtin mspatcha
}

ww_install_msscript()
{
    if ww_installed "$WW_SYS32/msscript.ocx"
    then
        return
    fi
    ww_cp_all msscript
    ww_regsvr msscript.ocx
}

ww_install_msvcirt()
{
    if ww_installed "$WW_SYS32/msvcirt.dll"
    then
        return
    fi
    ww_cp_all msvcirt
}

ww_install_msxml3()
{
    if ww_installed "$WW_SYS32/msxml3.dll"
    then
        return
    fi
    ww_try rm -f "$WW_SYS32"/msxml3.dll
    ww_override_dlls native msxml3
    ww_cd msxml3
    ww_try wine msiexec /i msxml3.msi /q
}

ww_install_msxml4()
{
    if ww_installed "$WW_SYS32/msxml4.dll"
    then
        return
    fi
    ww_override_dlls native,builtin msxml4
    ww_cd msxml4
    ww_try wine msiexec /i msxml.msi /q
}

ww_install_msxml6()
{
    if ww_installed "$WW_SYS32/msxml6.dll"
    then
        return
    fi
    ww_override_dlls native,builtin msxml6
    ww_try rm -f "$WW_SYS32"/msxml6.dll
    ww_cd msxml6
    ww_try wine msiexec /i msxml6_x86.msi /q
}

ww_install_nuget()
{
    if ww_installed "$WW_SYS32/nuget.exe"
    then
        return
    fi
    ww_install_dotnet40
    ww_cp_all nuget
    ww_warn "To run nuget, use the commandline \"$WINE nuget\"."
}

ww_install_ogg()
{
    if ww_installed "$WW_PROGRAM86/Xiph.Org/Open Codecs/AxPlayer.dll"
    then
        return
    fi
    ww_cd ogg
    ww_try wine opencodecs_0.85.17777.exe /S
}

ww_install_opensymbol()
{
    if ww_installed "$WW_FONTS/opens___.ttf"
    then
        return
    fi
    ww_cp_all_fonts opensymbol
    ww_register_font opens___.ttf "OpenSymbol"
}

ww_install_pdh()
{
    if ww_installed "$WW_SYS32/pdh.dll"
    then
        return
    fi
    ww_cp_all pdh
}

ww_install_physx()
{
    if ww_installed "$WW_PROGRAM86/NVIDIA Corporation/PhysX/Engine/v2.8.3/PhysXCore.dll"
    then
        return
    fi
    ww_cd physx
    ww_try wine msiexec /i PhysX-9.13.0604-SystemSoftware.msi /q
}

ww_install_pngfilt()
{
    if ww_installed "$WW_SYS32/pngfilt.dll"
    then
        return
    fi
    ww_cp_all pngfilt
    ww_regsvr pngfilt.dll
}

ww_install_python26()
{
    if ww_installed "$WW_C/Python26/python.exe"
    then
        return
    fi
    if [ "$WW_WINE_VER" = "wine-1.4.1" ]
    then
        ww_die "This installer is broken under $WW_WINE_VER. Please upgrade Wine. See https://code.google.com/p/winetricks/issues/detail?id=347 for more info."
    fi
    ww_cd python26
    ww_try wine msiexec /i python-2.6.2.msi ALLUSERS=1 /q
    ww_ahk_do "
    SetTitleMatchMode, 2
    run pywin32-214.win32-py2.6.exe
    WinWait, Setup, Wizard will install pywin32
    ControlClick Button2   ; next
    WinWait, Setup, Python 2.6 is required
    ControlClick Button3   ; next
    WinWait, Setup, Click Next to begin
    ControlClick Button3   ; next
    WinWait, Setup, finished
    ControlClick Button4   ; Finish
    WinWaitClose
"
}

ww_install_python26_comtypes()
{
    if ww_installed "$WW_C/Python26/Lib/site-packages/comtypes-0.6.2-py2.6.egg-info"
    then
        return
    fi
    ww_install_python26
    ww_cd python26_comtypes
    ww_try wine "C:\Python26\python.exe" setup.py install
}

ww_install_qdvd()
{
    if ww_installed "$WW_SYS32/qdvd.dll"
    then
        return
    fi
    ww_regsvr qdvd.dll
    ww_override_dlls native qdvd
}

ww_install_quartz()
{
    if ww_installed "$WW_SYS32/quartz.dll"
    then
        return
    fi
    ww_cp_all quartz
    ww_regsvr quartz.dll
    ww_override_dlls native quartz
}

ww_install_quicktime72()
{
    if ww_installed "$WW_WIN/Installer/{95A890AA-B3B1-44B6-9C18-A8F7AB3EE7FC}/QTPlayer.ico"
    then
        return
    fi
    unset QUICKTIME_QUIET
    QUICKTIME_QUIET="/qn"
    if ww_workaround_wine_bug 9366 ""  1.1.22,
    then
        ww_install_gdiplus
        ww_install_vcrun2005
    fi
    if ww_workaround_wine_bug 1347
    then
        ww_warn "Setting vista mode to avoid blacking the whole screen in quicktime"
        ww_set_winver vista
    fi
    ww_cd quicktime72
    ww_try wine quicktimeplayer72.exe ALLUSERS=1 DESKTOP_SHORTCUTS=0 QTTaskRunFlags=0 QTINFO.BISQTPRO=1 SCHEDULE_ASUW=0 REBOOT_REQUIRED=No $QUICKTIME_QUIET > /dev/null 2>&1
    if ww_workaround_wine_bug 11681
    then
        ww_warn "In Quicktime preferences, check Advanced / Safe Mode (gdi), or movies won't play."
        ww_try wine control "$WW_PROGRAM86\\QuickTime\\QTSystem\\QuickTime.cpl"
    fi
}

ww_install_quicktime76()
{
    if ww_installed "$WW_WIN/Installer/{57752979-A1C9-4C02-856B-FBB27AC4E02C}/QTPlayer.ico"
    then
        return
    fi
    unset QUICKTIME_QUIET
    QUICKTIME_QUIET="/qn"
    if ww_workaround_wine_bug 9366 ""  1.1.22,
    then
        ww_install_gdiplus
        ww_install_vcrun2005
    fi
    if ww_workaround_wine_bug 1347
    then
        ww_warn "Setting vista mode to avoid blacking the whole screen in quicktime"
        ww_set_winver vista
    fi
    ww_cd quicktime76
    ww_try wine QuickTimeInstaller.exe ALLUSERS=1 DESKTOP_SHORTCUTS=0 QTTaskRunFlags=0 QTINFO.BISQTPRO=1 SCHEDULE_ASUW=0 REBOOT_REQUIRED=No $QUICKTIME_QUIET > /dev/null 2>&1
    if ww_workaround_wine_bug 11681
    then
        ww_warn "In Quicktime preferences, check Advanced / Safe Mode (gdi), or movies won't play."
        ww_try wine control "$WW_PROGRAM86\\QuickTime\\QTSystem\\QuickTime.cpl"
    fi
}

ww_install_riched20()
{
    if ww_installed "$WW_SYS32/riched20.dll"
    then
        return
    fi
    ww_cp_all riched20
    ww_override_dlls native,builtin riched20
    ww_install_msls31
}

ww_install_riched30()
{
    if ww_installed "$WW_SYS32/riched30.dll" && ww_installed "$WW_SYS32/msls31.dll"
    then
        return
    fi
    ww_cp_all riched30
    ww_override_dlls native,builtin riched30
}

ww_install_richtx32()
{
    if ww_installed "$WW_SYS32/richtx32.ocx"
    then
        return
    fi
    ww_cp_all richtx32
    ww_regsvr richtx32.ocx
}

ww_install_sdl()
{
    if ww_installed "$WW_SYS32/SDL.dll"
    then
        return
    fi
    ww_cp_all sdl
}

ww_install_secur32()
{
    if ww_installed "$WW_SYS32/secur32.dll"
    then
        return
    fi
    ww_cp_all secur32
    ww_override_dlls native,builtin secur32
}

ww_install_set_ao_disabled()
{
    ww_set_wined3d_var AlwaysOffscreen disabled
}

ww_install_set_ao_enabled()
{
    ww_set_wined3d_var AlwaysOffscreen enabled
}

ww_install_set_ddr_gdi()
{
    ww_set_wined3d_var DirectDrawRenderer gdi
}

ww_install_set_ddr_opengl()
{
    ww_set_wined3d_var DirectDrawRenderer opengl
}

ww_install_set_desktop_mode()
{
    cur_res=$(xrandr -q | awk -F'current' -F',' 'NR==1 {gsub("( |current)","");print $2}')
    ww_set_virtual_desktop on $cur_res
}

ww_install_set_fontsmooth_disable()
{
    ww_set_fontsmooth disable
}

ww_install_set_fontsmooth_bgr()
{
    ww_set_fontsmooth bgr
}

ww_install_set_fontsmooth_rgb()
{
    ww_set_fontsmooth rgb
}

ww_install_set_fontsmooth_gray()
{
    ww_set_fontsmooth gray
}

ww_install_set_forcemono()
{
    ww_override_dlls native mscoree
    ww_override_dlls disabled mscorsvw.exe
}

ww_install_set_glsl_disabled()
{
    ww_set_wined3d_var UseGLSL disabled
}

ww_install_set_glsl_enabled()
{
    ww_set_wined3d_var UseGLSL enabled
}

ww_install_set_grabfullscreen_n()
{
    ww_set_grabfullscreen n
}

ww_install_set_grabfullscreen_y()
{
    ww_set_grabfullscreen y
}

ww_install_set_heapcheck()
{
    cat > "$WW_TMP"/heapcheck.reg <<_EOF_
REGEDIT4

[HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager]
"GlobalFlag"=dword:00200030

_EOF_
    ww_try_regedit "$WW_TMP"\\heapcheck.reg
}

ww_install_set_multisampling_disabled()
{
    ww_set_wined3d_var Multisampling disabled
}

ww_install_set_multisampling_enabled()
{
    ww_set_wined3d_var Multisampling enabled
}

ww_install_set_mwo_force()
{
    ww_set_mwo force
}

ww_install_set_mwo_enabled()
{
    ww_set_mwo enabled
}

ww_install_set_mwo_disable()
{
    ww_set_mwo disable
}

ww_install_set_native_mdac()
{
    ww_override_dlls native,builtin odbc32 odbccp32 oledb32
}

ww_install_set_native_oleaut32()
{
    ww_override_dlls native,builtin oleaut32
}

ww_install_set_nocrashdialog()
{
    echo "Disabling graphical crash dialog"
    cat > "$WW_TMP"/crashdialog.reg <<_EOF_
REGEDIT4

[HKEY_CURRENT_USER\Software\Wine\WineDbg]
"ShowCrashDialog"=dword:00000000

_EOF_
    cd "$WW_TMP"
    ww_try_regedit crashdialog.reg
}

ww_install_set_npm_repack()
{
    ww_set_wined3d_var NonPower2Mode repack
}

ww_install_set_orm_fbo()
{
    ww_set_wined3d_var OffscreenRenderingMode fbo
}

ww_install_set_orm_backbuffer()
{
    ww_set_wined3d_var OffscreenRenderingMode backbuffer
}

ww_install_set_psm_disabled()
{
    ww_set_wined3d_var PixelShaderMode disabled
}

ww_install_set_psm_enabled()
{
    ww_set_wined3d_var PixelShaderMode enabled
}

ww_install_set_rtlm_auto()
{
    ww_set_wined3d_var RenderTargetLockMode auto
}

ww_install_set_rtlm_disabled()
{
    ww_set_wined3d_var RenderTargetLockMode disabled
}

ww_install_set_rtlm_readdraw()
{
    ww_set_wined3d_var RenderTargetLockMode readdraw
}

ww_install_set_rtlm_readtex()
{
    ww_set_wined3d_var RenderTargetLockMode readtex
}

ww_install_set_rtlm_texdraw()
{
    ww_set_wined3d_var RenderTargetLockMode texdraw
}

ww_install_set_rtlm_textex()
{
    ww_set_wined3d_var RenderTargetLockMode textex
}

ww_install_set_sound_alsa()
{
    ww_set_sound alsa
}

ww_install_set_sound_coreaudio()
{
    ww_set_sound coreaudio
}

ww_install_set_sound_disabled()
{
    ww_set_sound disabled
}

ww_install_set_sound_oss()
{
    ww_set_sound oss
}

ww_install_set_windowmanagerdecorated_n()
{
    ww_set_windowmanagerdecorated n
}

ww_install_set_windowmanagerdecorated_y()
{
    ww_set_windowmanagerdecorated y
}

ww_install_set_windowmanagermanaged_n()
{
    ww_set_windowmanagermanaged n
}

ww_install_set_windowmanagermanaged_y()
{
    ww_set_windowmanagermanaged y
}

ww_install_set_winver_nt40()
{
    set_winver nt40
}

ww_install_set_winver_vista()
{
    set_winver vista
}

ww_install_set_winver_win2k()
{
    ww_set_winver win2k
}

ww_install_set_winver_win2k3()
{
    ww_set_winver win2k3
}

ww_install_set_winver_win7()
{
    ww_set_winver win7
}

ww_install_set_winver_win98()
{
    ww_set_winver win98
}

ww_install_set_winver_winxp()
{
    ww_set_winver winxp
}

ww_install_set_vsm_hardware()
{
    ww_set_wined3d_var VertexShaders hardware
}

ww_install_setupapi()
{
    if ww_installed "$WW_SYS32/setupapi.dll"
    then
        return
    fi
    ww_cp_all setupapi
    ww_override_dlls native,builtin setupapi
}

ww_install_shockwave()
{
    if ww_installed "$WW_SYS32/Adobe/Shockwave 12/shockwave_Projector_Loader.dcr"
    then
        return
    fi
    ww_cd shockwave
    ww_try wine msiexec /i sw_lic_full_installer.msi /q
}

ww_install_speechsdk()
{
    if ww_installed "$WW_PROGRAM86/Microsoft Speech SDK 5.1/Bin/SAPI51SampleApp.exe"
    then
        return
    fi
    ww_set_winver win2k
    ww_cd speechsdk
    ww_try wine msiexec /i "Microsoft Speech SDK 5.1.msi" /q
    ww_set_winver winxp
}

ww_install_strictdrawordering_disabled()
{
    ww_set_wined3d_var StrictDrawOrdering disabled
}

ww_install_strictdrawordering_enabled()
{
    ww_set_wined3d_var StrictDrawOrdering enabled
}

ww_install_tabctl32()
{
    if ww_installed "$WW_SYS32/tabctl32.ocx"
    then
        return
    fi
    ww_cp_all tabctl32
    ww_regsvr tabctl32.ocx
}

ww_install_tahoma()
{
    if ww_installed "$WW_FONTS/tahoma.ttf"
    then
        return
    fi
    ww_cp_all_fonts tahoma
    ww_register_font tahoma.ttf "Tahoma"
    ww_register_font tahomabd.ttf "Tahoma Bold"
    chmod +w "$WW_FONTS"/tahoma*.ttf
}

ww_install_takao()
{
    if ww_installed "$WW_FONTS/takaogothic.ttf"
    then
        return
    fi
    ww_cp_all_fonts takao
    ww_register_font takaogothic.ttf "TakaoGothic"
    ww_register_font takaopgothic.ttf "TakaoPGothic"
    ww_register_font takaomincho.ttf "TakaoMincho"
    ww_register_font takaopmincho.ttf "TakaoPMincho"
    ww_register_font takaoexgothic.ttf "TakaoExGothic"
    ww_register_font takaoexmincho.ttf "TakaoExMincho"
}

ww_install_uff()
{
    if ww_installed "$WW_FONTS/ubuntu-r.ttf"
    then
        return
    fi
    ww_cp_all_fonts uff
    ww_register_font ubuntu-r.ttf "Ubuntu"
    ww_register_font ubuntu-i.ttf "Ubuntu Italic"
    ww_register_font ubuntu-b.ttf "Ubuntu Bold"
    ww_register_font ubuntu-bi.ttf "Ubuntu Bold Italic"
}

ww_install_unifont()
{
    if ww_installed "$WW_FONTS/unifont.ttf"
    then
        return
    fi
    ww_cp_all_fonts unifont
    ww_register_font unifont.ttf "Unifont"
    ww_register_font_replacement "Arial Unicode MS" "Unifont"
}

ww_install_updspapi()
{
    if ww_installed "$WW_SYS32/updspapi.dll"
    then
        return
    fi
    ww_cp_all updspapi
    ww_override_dlls native,builtin updspapi
}

ww_install_usp10()
{
    if ww_installed "$WW_SYS32/usp10.dll"
    then
        return
    fi
    ww_cp_all usp10
    ww_override_dlls native,builtin usp10
}

ww_install_vb2run()
{
    if ww_installed "$WW_SYS32/vbrun200.dll"
    then
        return
    fi
    ww_cp_all vb2run
}

ww_install_vb3run()
{
    if ww_installed "$WW_SYS32/vbrun300.dll"
    then
        return
    fi
    ww_cp_all vb3run
}

ww_install_vb4run()
{
    if ww_installed "$WW_SYS32/Vb40032.dll"
    then
        return
    fi
    ww_cp_all vb4run
}

ww_install_vb5run()
{
    if ww_installed "$WW_SYS32/msvbvm50.dll"
    then
        return
    fi
    ww_cd vb5run
    ww_try wine msvbvm50.exe /q
}

ww_install_vb6run()
{
    if ww_installed "$WW_SYS32/MSVBVM60.DLL"
    then
        return
    fi
    ww_try rm -f "$WW_SYS32"/comcat.dll
    ww_try rm -f "$WW_SYS32"/oleaut32.dll
    ww_try rm -f "$WW_SYS32"/olepro32.dll
    ww_try rm -f "$WW_SYS32"/stdole2.tlb
    ww_cd vb6run
    ww_try wine vbrun60sp6.exe /q
    status=$?
    case $status in
        0|43) ;;
        *) ww_die vb6run installation failed ;;
    esac
}

ww_install_vcrun2003()
{
    if ww_installed "$WW_SYS32/msvcp71.dll"
    then
        return
    fi
    ww_cp_all vcrun2003
}

ww_install_vcrun2005()
{
    if ww_installed "$WW_WIN/winsxs/x86_Microsoft.VC80.MFC_1fc8b3b9a1e18e3b_8.0.50727.6195_x-ww_150c9e8b/mfc80.dll" || ww_installed "$WW_WIN/winsxs/x86_microsoft.vc80.mfc_1fc8b3b9a1e18e3b_8.0.50727.6195_none_deadbeef/mfc80.dll"
    then
        return
    fi
    ww_override_dlls native,builtin atl80 msvcm80 msvcp80 msvcr80 vcomp
    ww_cd vcrun2005
    wine vcredist_x86.EXE /q
}

ww_install_vcrun2008()
{
    if ww_installed "$WW_COMMON86/Microsoft Shared/VC/msdia90.dll"
    then
        return
    fi
    ww_override_dlls native,builtin atl90 msvcm90 msvcp90 msvcr90 vcomp
    ww_cd vcrun2008
    wine vcredist_x86.EXE /q
}

ww_install_vcrun2010()
{
    if ww_installed "$WW_SYS32/mfc100.dll"
    then
        return
    fi
    if ww_workaround_wine_bug 23427 ""  1.3.5,
    then
        ww_install_msxml3
    fi
    ww_override_dlls native,builtin msvcp100 msvcr100 vcomp100 atl100
    ww_cd vcrun2010
    ww_try wine vcredist_x86.exe /q
    case "$WW_ARCH" in
        win64)
            if ww_workaround_wine_bug 30713 "Manually extracting the 64-bit dlls"
            then
                cp "$WW_PACKAGES"/vcrun2010/mfc100.dll "$WW_SYS64"
                cp "$WW_PACKAGES"/vcrun2010/mfc100u.dll "$WW_SYS64"
                cp "$WW_PACKAGES"/vcrun2010/msvcr100.dll "$WW_SYS64"
                cp "$WW_PACKAGES"/vcrun2010/msvcp100.dll "$WW_SYS64"
                cp "$WW_PACKAGES"/vcrun2010/vcomp100.dll "$WW_SYS64"
                cp "$WW_PACKAGES"/vcrun2010/atl100.dll "$WW_SYS64"
            else
                ww_try wine vcredist_x64.exe /q
            fi
            ;;
    esac
}

ww_install_vcrun2012()
{
    if ww_installed "$WW_SYS32/mfc110.dll"
    then
        return
    fi
    ww_override_dlls native,builtin atl110 msvcp110 msvcr110 vcomp110
    ww_cd vcrun2012
    if ww_workaround_wine_bug 17273 "Manually extracting dlls"
    then
        cp mfc110.dll "$WW_SYS32"
        cp mfc110u.dll "$WW_SYS32"
        cp msvcr110.dll "$WW_SYS32"
        cp msvcp110.dll "$WW_SYS32"
        cp vcomp110.dll "$WW_SYS32"
        cp atl110.dll "$WW_SYS32"
    else
        ww_try wine vcredist_x86.exe /q
    fi
}

ww_install_vcrun2013()
{
    if ww_installed "$WW_SYS32/mfc120.dll"
    then
        return
    fi
    ww_override_dlls native,builtin atl120 msvcp120 msvcr120 vcomp120
    ww_cd vcrun2013
    if ww_workaround_wine_bug 17273 "Manually extracting dlls"
    then
        cp mfc120.dll "$WW_SYS32"
        cp mfc120u.dll "$WW_SYS32"
        cp msvcr120.dll "$WW_SYS32"
        cp msvcp120.dll "$WW_SYS32"
        cp vcomp120.dll "$WW_SYS32"
    else
        ww_try wine vcredist_x86.exe /q
    fi
}

ww_install_vcrun6()
{
    if ww_installed "$WW_SYS32/mfc42.dll"
    then
        return
    fi
    rm -f "$WW_SYS32"/comcat.dll
    rm -f "$WW_SYS32"/msvcrt.dll
    rm -f "$WW_SYS32"/oleaut32.dll
    rm -f "$WW_SYS32"/olepro32.dll
    rm -f "$WW_SYS32"/stdole2.tlb
    ww_cd vcrun6
    wine vcredist.exe
    status=$?
    status=$?
    case $status in
        0|43) ;;
        *) ww_die vcrun6 installation failed ;;
    esac
    ww_install_mfc42
}

ww_install_vcrun6sp6()
{
    if ww_installed "$WW_SYS32/mfc42.dll"
    then
        return
    fi
    ww_try rm -f "$WW_WIN32"/comcat.dll
    ww_try rm -f "$WW_WIN32"/msvcrt.dll
    ww_try rm -f "$WW_WIN32"/oleaut32.dll
    ww_try rm -f "$WW_WIN32"/olepro32.dll
    ww_try rm -f "$WW_WIN32"/stdole2.tlb
    ww_cd vcrun6sp6
    ww_try wine vcredist.exe
    status=$?
    case $status in
        0|43) ;;
        *) ww_die vcrun6sp6 installation failed ;;
    esac
    ww_try cp -f "$WW_PACKAGES"/vcrun6sp6/mfc42u.dll "$WW_SYS32"
}

ww_install_vjrun20()
{
    if ww_installed "$WW_WIN/Microsoft.NET/Framework/VJSharp/VJSharpSxS10.dll"
    then
        return
    fi
    if [ $WW_ARCH = win64 ]
    then
        ww_warn "vjrun20 depends on dotnet20, which doesn't work on 64-bit wine yet. Skipping."
        return
    fi
    ww_install_dotnet20
    ww_cd vjrun20
    ww_try wine vjredist.exe /q /C:"install /QNT"
}

ww_install_wenquanyi()
{
    if ww_installed "$WW_FONTS/wqy-microhei.ttc"
    then
        return
    fi
    ww_try cp -f "$WW_PACKAGES"/wenquanyi/wqy-microhei.ttc "$WW_FONTS"/
    ww_register_font wqy-microhei.ttc "WenQuanYi Micro Hei"
}

ww_install_windowscodecs()
{
    if ww_installed "$WW_SYS32/WindowsCodecs.dll"
    then
        return
    fi
    rm -f "$WW_SYS32"/windowscodecs.dll "$WW_SYS32"/windowscodecsext.dll "$WW_SYS32"/photometadatahandler.dll
    ww_override_dlls native windowscodecs windowscodecsext
    if test -x /usr/bin/taskset && ww_workaround_wine_bug 32859 "Working around possibly broken libX11"
    then
        TASKSET="taskset -c 0"
    else
        TASKSET=""
    fi
    ww_cd windowscodecs
    ww_try $TASKSET wine wic_x86_enu.exe /passive
}

ww_install_winhttp()
{
    if ww_installed "$WW_SYS32/winhttp.dll"
    then
        return
    fi
    ww_cp_all winhttp
    ww_override_dlls native,builtin winhttp
}

ww_install_wininet()
{
    if ww_installed "$WW_SYS32/wininet.dll"
    then
        return
    fi
    ww_cp_all wininet
    ww_override_dlls native,builtin wininet
}

ww_install_wmi()
{
    if ww_installed "$WW_SYS32/wbem/wbemcore.dll"
    then
        return
    fi
    if test $WW_ARCH = win64
    then
        ww_die "Installer doesn't support 64-bit architecture."
    fi
    ww_set_winver win98
    ww_override_dlls native,builtin wbemprox wmiutils
    ww_cd wmi
    ww_try wine wmi9x.exe /S
    ww_set_winver winxp
}

ww_install_wmp10()
{
    if ww_installed "$WW_SYS32/l3codecp.acm"
    then
        return
    fi
    if [ $WW_ARCH = win64 ]
    then
        ww_die "Installer doesn't support 64-bit architecture. Use a 32-bit WINEPREFIX instead."
    fi
    ww_install_wsh57
    ww_cd wmp10
    ww_try wine MP10Setup.exe /q
    ww_try_regedit /D "HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Cdr4_2K"
    ww_try_regedit /D "HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Cdralw2k"
    ww_set_winver win2k
    ww_cd wm9codecs
    ww_try wine WM9Codecs9x.exe /q
    ww_set_winver winxp
    ww_declare_exe "c:\\Program Files\\Windows Media Player" "wmplayer.exe" "wmp10"
}

ww_install_wmp9()
{
    if ww_installed "$WW_SYS32/l3codeca.acm"
    then
        return
    fi
    if [ $WW_ARCH = win64 ]
    then
        ww_die "Installer doesn't support 64-bit architecture."
    fi
    ww_install_wsh57
    ww_set_winver win2k
    rm -f "$WW_SYS32"/wmvcore.dll "$WW_SYS32"/wmp.dll
    ww_override_dlls native wmp
    ww_override_app_dlls MPSetup.exe native pidgen
    ww_cd wmp9
    ww_try wine MPSetup.exe /q
    if ww_workaround_wine_bug 1886 "Re-installing since it does not work on the first try." 1.5.23,
    then
        ww_try wine MPSetup.exe /q
    fi
    ww_set_winver win2k
    ww_cd wm9codecs
    ww_try wine WM9Codecs9x.exe /q
    ww_set_winver winxp
    ww_declare_exe "c:\\Program Files\\Windows Media Player" "wmplayer.exe" "wmp9"
}

ww_install_wsh56js()
{
    if ww_installed "$WW_C/windows/inf/jscren.inf"
    then
        return
    fi
    ww_override_dlls native,builtin jscript
    ww_try rm -f "$WW_SYS32"/jscript.dll
    ww_cd wsh56js
    ww_try wine Windows2000-KB917344-56-x86-enu.exe /q
}

ww_install_wsh56vb()
{
    if ww_installed "$WW_SYS32/vbscript.dll"
    then
        return
    fi
    ww_override_dlls native,builtin vbscript
    ww_try rm -f "$WW_SYS32"/vbscript.dll
    ww_cd wsh56vb
    ww_try wine vbs56men.exe /q
}

ww_install_wsh57()
{
    if ww_installed "$WW_SYS32/scrrun.dll"
    then
        return
    fi
    ww_try cp -R "$WW_PACKAGES"/wsh57/*.* "$WW_SYS32"
    ww_override_dlls native,builtin jscript scrrun vbscript cscript.exe wscript.exe
    ww_regsvr dispex.dll jscript.dll scrobj.dll scrrun.dll vbscript.dll wshcon.dll wshext.dll
}

ww_install_xact()
{
    if ww_installed "$WW_SYS32/xactengine2_0.dll"
    then
        return
    fi
    ww_cp_all xact
    ww_regsvr xactengine2_0.dll xactengine2_1.dll xactengine2_2.dll xactengine2_3.dll xactengine2_4.dll xactengine2_5.dll xactengine2_6.dll xactengine2_7.dll xactengine2_8.dll xactengine2_9.dll xactengine2_10.dll xactengine3_1.dll xactengine3_2.dll xactengine3_3.dll xactengine3_4.dll xactengine3_5.dll xactengine3_6.dll xaudio2_0.dll xaudio2_1.dll xaudio2_2.dll xaudio2_3.dll xaudio2_4.dll xaudio2_5.dll xaudio2_6.dll
}

ww_install_xact_jun2010()
{
    if ww_installed "$WW_SYS32/xactengine2_0.dll"
    then
        return
    fi
    ww_install_xact
    ww_cp_all xact_jun2010
    ww_regsvr xactengine3_7.dll xaudio2_7.dll
}

ww_install_xinput()
{
    if ww_installed "$WW_SYS32/xinput1_1.dll"
    then
        return
    fi
    ww_cp_all xinput
    ww_regsvr xinput1_1.dll xinput1_2.dll xinput1_3.dll xinput9_1_0.dll
    ww_override_dlls native xinput1_1 xinput1_2 xinput1_3 xinput9_1_0
}

ww_install_xmllite()
{
    if ww_installed "$WW_SYS32/xmllite.dll"
    then
        return
    fi
    case $LANG in
        en*|fr*|de*|ja*|it*|el*|pt*|es*|ru*|nl*|tr*|sv*|hu*|pl*|no*|zh_c*|zh_t*|cs*|da*|fi*|he*|ko*);;
        *) ww_die "sorry, xmllite install not yet implemented for language $LANG" ;;
    esac
    if ww_workaround_wine_bug 16013
    then
        mkdir -p "$WW_SYS32"/catroot/\{f750e6c3-38ee-11d1-85e5-00c04fc295ee\}
        ww_try cp -f "$WW_PACKAGES"/xmllite/oem0.cat "$WW_SYS32"/catroot/\{f750e6c3-38ee-11d1-85e5-00c04fc295ee\}
    fi
    ww_override_dlls native xmllite
    ww_cd xmllite
    case $LANG in
        en*) ww_try wine WindowsXP-KB915865-v11-x86-ENU.exe /q ;;
        fr*) ww_try wine WindowsXP-KB915865-v11-x86-FRA.exe /q ;;
        de*) ww_try wine WindowsXP-KB915865-v11-x86-DEU.exe /q ;;
        ja*) ww_try wine WindowsXP-KB915865-v11-x86-JPN.exe /q ;;
        it*) ww_try wine WindowsXP-KB915865-v11-x86-ITA.exe /q ;;
        el*) ww_try wine WindowsXP-KB915865-v11-x86-ELL.exe /q ;;
        pt_b*) ww_try wine WindowsXP-KB915865-v11-x86-PTB.exe /q ;;
        pt*) ww_try wine WindowsXP-KB915865-v11-x86-PTG.exe /q ;;
        es*) ww_try wine WindowsXP-KB915865-v11-x86-ESN.exe /q ;;
        ru*) ww_try wine WindowsXP-KB915865-v11-x86-RUS.exe /q ;;
        nl*) ww_try wine WindowsXP-KB915865-v11-x86-NLD.exe /q ;;
        tr*) ww_try wine WindowsXP-KB915865-v11-x86-TRK.exe /q ;;
        sv*) ww_try wine WindowsXP-KB915865-v11-x86-SVE.exe /q ;;
        hu*) ww_try wine WindowsXP-KB915865-v11-x86-HUN.exe /q ;;
        pl*) ww_try wine WindowsXP-KB915865-v11-x86-PLK.exe /q ;;
        no*) ww_try wine WindowsXP-KB915865-v11-x86-NOR.exe /q ;;
        zh_t*) ww_try wine WindowsXP-KB915865-v11-x86-CHT.exe /q ;;
        zh_c*) ww_try wine WindowsXP-KB915865-v11-x86-CHS.exe /q ;;
        cs*) ww_try wine WindowsXP-KB915865-v11-x86-CSY.exe /q ;;
        da*) ww_try wine WindowsXP-KB915865-v11-x86-DAN.exe /q ;;
        fi*) ww_try wine WindowsXP-KB915865-v11-x86-FIN.exe /q ;;
        he*) ww_try wine WindowsXP-KB915865-v11-x86-HEB.exe /q ;;
        ko*) ww_try wine WindowsXP-KB915865-v11-x86-KOR.exe /q ;;
    esac
}

ww_install_xna31()
{
    if ww_installed "$WW_WIN/assembly/GAC_32/Microsoft.Xna.Framework.Game/3.1.0.0__6d5c3888ef60e27d/Microsoft.Xna.Framework.Game.dll"
    then
        return
    fi
    ww_install_dotnet20sp2
    ww_cd xna31
    ww_try wine msiexec /quiet /i xnafx31_redist.msi
}

ww_install_xna40()
{
    if ww_installed "$WW_COMMON86/Microsoft Shared/XNA/Framework/v4.0/XnaNative.dll"
    then
        return
    fi
    ww_warn "xna40 does not install properly in wine yet"
    ww_install_dotnet40
    ww_cd xna40
    ww_try wine msiexec /quiet /i xnafx40_redist.msi
}

ww_install_xvid()
{
    if ww_installed "$WW_PROGRAM86/Xvid/xvid.ico"
    then
        return
    fi
    ww_install_vcrun6
    if ww_workaround_wine_bug 27380 "Installing msvcr80 to avoid crash in setavi32.exe"
    then
        ww_install_vcrun2008
    fi
    ww_cd xvid
    ww_try wine Xvid-1.3.2-20110601.exe --mode unattended --decode_divx 1 --decode_3ivx 1 --decode_other 1
}
